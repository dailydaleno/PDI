package projectAStar;

import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import javax.imageio.ImageIO;

public class ImagemES {
	public static BufferedImage carregaImagemArquivo(String diretorio) throws IOException {
		//lê imagem no diretório
		return ImageIO.read(new File(diretorio));
	}
	
	public static int[][] obtemDadosImagem(BufferedImage imagem) {
		//obtém dimensão da imagem
		int w = imagem.getWidth();
		int h = imagem.getHeight();
		//cria matriz com dimensão da imagem de entrada
		int[][] dadosImagem = new int[w][h];
		//carrega a matriz com os dados da imagem
		for (int x = 0; x < w; x++) {
			for (int y = 0; y < h; y++) {
				dadosImagem[x][y] = imagem.getRGB(x, y);
			}
		}
		return dadosImagem;
	}
	
	public static BufferedImage obtemDadosImagem(int[][] imagemDados) {
		//cria uma instância da imagem
		BufferedImage dadosImagem = new BufferedImage(imagemDados.length, imagemDados[0].length, ColorSpace.TYPE_RGB);
		//obtém dimensão da imagem
		int w = dadosImagem.getWidth();
		int h = dadosImagem.getHeight();
		//alimenta matriz com os dados dos pixels da imagem
		for (int x = 0; x < w; x++) {
			for (int y = 0; y < h; y++) {
				dadosImagem.setRGB(x, y, imagemDados[x][y]);
			}
		}
		return dadosImagem;
	}
	
	public static int[][] copiarDadosImagem(int[][] imagemFonteDados) {
		//cria uma instância da imagem com sua dimensão
		int[][] copiaImagem = new int[imagemFonteDados.length][imagemFonteDados[0].length];
		//copia os dados da imagem
		for (int i = 0; i < imagemFonteDados.length; i++) {
			copiaImagem[i] = Arrays.copyOf(imagemFonteDados[i], imagemFonteDados[i].length);
		}
		return copiaImagem;
	}			
}




*****************************************************************************

package projectAStar;

import java.awt.Color;
import java.awt.Point;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import projectAStar.ImagemES;
import java.awt.image.BufferedImage;

public class AEstrela {
	//variáveis que indicam o tipo de vizinhança 
    private static int VIZINHANCA_4N = 0;
    private static int VIZINHANCA_8N = 1;

    public static void main(String[] args) throws IOException {
        //obtém endereço da imagem origem e destino
        String caminhoOrigem = "imgSegmentadaSimples.jpg";
        String caminhoDestino = "q02_4N_V1.jpg";  
        //obtém o tipo de vizinhança
        int vizinhanca = 4;  // vizinhança, pode ser 4 ou 8
        //obtém coodenadas do ponto início e destino
        int pontoInicioX = 160;
        int pontoInicioY = 70;      
        int pontoDestinoX = 479;
        int pontoDestinoY = 618;
        //carrega dados da imagem origem
        BufferedImage image = ImagemES.carregaImagemArquivo(caminhoOrigem);
        int[][] imagemDados = ImagemES.obtemDadosImagem(image);
        int[][] imagemSaida = ImagemES.copiarDadosImagem(imagemDados);
        
        Point pontoInicio = new Point(pontoInicioX, pontoInicioY);
        Point pontoDestino = new Point(pontoDestinoX, pontoDestinoY);
        
        //obtém o caminho mais curto de acordo com tipo de vizinhança desejada
        List<Point> caminhoMinimo;
        if (vizinhanca == 4) {        	
        	caminhoMinimo = aEstrela(imagemDados, pontoInicio, pontoDestino, VIZINHANCA_4N);
        } else {        	
        	caminhoMinimo = aEstrela(imagemDados, pontoInicio, pontoDestino, VIZINHANCA_8N);
        }
        //Para cada ponto do caminho mínimo, pintar de vermelhor
        for (Point p : caminhoMinimo) {
            imagemSaida[(int)p.getX()][(int)p.getY()] = Color.RED.getRGB();
        }
        //salva imagem no diretório
        ImageIO.write(ImagemES.obtemDadosImagem(imagemSaida), "png", new File(caminhoDestino));
    }

    private static List<Point> aEstrela(int[][] imagemDados, Point pontoInicio, Point pontoDestino, int tipoVizinhanca) {
        //cria mapa de custo
    	Map<Point, Double> gCusto = new HashMap<Point, Double>();
        Map<Point, Double> fCusto = new HashMap<Point, Double>();
        //cria lista de coordenadas (pontos) que no final constituirão ou não o caminho
        Set<Point> listaPontoFechado = new HashSet<Point>();
        Set<Point> listaPontoAberto = new HashSet<Point>();
        Map<Point, Point> caminho = new HashMap<Point, Point>();  //armazena o conjunto de coordenadas que constituem o caminho 
        //começa a fazer o mapeamento partindo do ponto início
        listaPontoAberto.add(pontoInicio);
        gCusto.put(pontoInicio, 0D);
        fCusto.put(pontoInicio, calcularCustoHeuristica(pontoInicio, pontoDestino));  //calcula e armazena custo heuristico do ponto início até destino

        //enquanto houver pixel ou coordenadas da imagem para visitar
        while (!listaPontoAberto.isEmpty()) {
            // Pega candidato com menor custo
            Point correntePonto = null;
            Iterator<Point> iterador = listaPontoAberto.iterator();  //permite examinar um container (lista)
            //enquanto existir pontosa visitar
            while (iterador.hasNext()) {
                Point proximoPonto = iterador.next();
                //verifica se o próximo ponto possui custo menor que o atual
                if (correntePonto == null || fCusto.get(proximoPonto) < fCusto.get(correntePonto)) {
                	correntePonto = proximoPonto;  //armazena menor custo
                }
            }
            //faz a comparação dentro do heap da JVM
            if (pontoDestino.equals(correntePonto)) {  
                return reconstruirCaminho(pontoDestino, caminho);  //reconstroi o caminho do ponto dest
            }
            //atualiza removendo da lista aberta e incluindo na fechada
            listaPontoAberto.remove(correntePonto);
            listaPontoFechado.add(correntePonto);
            // obtém vizinhos do corrente ponto
            List<Point> listaVizinhos = null;
            if (tipoVizinhanca == VIZINHANCA_4N) {
            	listaVizinhos = listarVizinhos4N(imagemDados, correntePonto);
            } else {
            	listaVizinhos = listarVizinhos8N(imagemDados, correntePonto);
            }
            for (Point pontoVizinho : listaVizinhos) {
                if (listaPontoFechado.contains(pontoVizinho)) {
                    continue;
                }
                boolean melhor = false;
                //calcula custo heuristico
                double g = gCusto.get(correntePonto) + calcularCustoVizinho(imagemDados, correntePonto, pontoVizinho);  
                double h = calcularCustoHeuristica(pontoVizinho, pontoDestino);
                //verifica melhor custo
                if (!listaPontoAberto.contains(pontoVizinho)) {
                	listaPontoAberto.add(pontoVizinho);
                    melhor = true;
                } else if (g < gCusto.get(correntePonto)) {
                    melhor = true;
                }
                //se for melhor custo, entao atualiza caminho e adiciona custos
                if (melhor) {
                	caminho.put(pontoVizinho, correntePonto);
                    gCusto.put(pontoVizinho, g);
                    fCusto.put(pontoVizinho, g + h);
                }
            }
        }
        throw new RuntimeException("Não é possível encontar o caminho mínimo a partir de " + pontoInicio + " até " + pontoDestino);
    }

    private static List<Point> reconstruirCaminho(Point ponto, Map<Point, Point> caminho) {
        List<Point> lista = new ArrayList<Point>();
        lista.add(ponto);
        if (caminho.containsKey(ponto)) {
            lista.addAll(reconstruirCaminho(caminho.get(ponto), caminho));
        }
        return lista;
    }

    private static double calcularCustoVizinho(int[][] imagemDados, Point p, Point q) {
        Color pCorPixel = new Color(imagemDados[(int) p.getX()][(int) p.getY()]);
        Color qCorPixel = new Color(imagemDados[(int) q.getX()][(int) q.getY()]);
        //o custo é calculado considenrando a diferença de intensidade de cor de cada canal multiplicado por um mil
        int vermelhoDiferenca = Math.abs(pCorPixel.getRed() - qCorPixel.getRed());
        int verdeDiferenca = Math.abs(pCorPixel.getGreen() - qCorPixel.getGreen());
        int azulDiferenca = Math.abs(pCorPixel.getBlue() - qCorPixel.getBlue());
        
        return (vermelhoDiferenca + verdeDiferenca + azulDiferenca) * 1000;
    }

    private static List<Point> listarVizinhos4N(int[][] dados, Point ponto) {
        //lista de vizinhos ao ponto
    	List<Point> lista = new ArrayList<Point>();
        //obtém coordenada do ponto
        int x = (int) ponto.getX();
        int y = (int) ponto.getY();
        //obtém vizinhos
        if (x + 1 < dados.length) {
            lista.add(new Point(x + 1, y));
        }
        if (y + 1 < dados[0].length) {
            lista.add(new Point(x, y + 1));
        }
        if (x > 0) {
            lista.add(new Point(x - 1, y));
        }
        if (y > 0) {
            lista.add(new Point(x, y - 1));
        }
        return lista;
    }

    private static List<Point> listarVizinhos8N(int[][] dados, Point p) {
        //inclui na lista os vizinhos de 4N
    	List<Point> lista = listarVizinhos4N(dados, p);
    	//obtém coordenada do ponto
        int x = (int) p.getX();
        int y = (int) p.getY();
      //obtém vizinhos
        if (x + 1 < dados.length && y + 1 < dados[0].length) {
            lista.add(new Point(x + 1, y + 1));
        }
        if (x > 0 && y + 1 < dados[0].length) {
            lista.add(new Point(x - 1, y + 1));
        }
        if (x > 0 && y > 0) {
            lista.add(new Point(x - 1, y - 1));
        }
        if (x + 1 < dados.length && y > 0) {
            lista.add(new Point(x + 1, y - 1));
        }
        return lista;
    }

    private static double calcularCustoHeuristica(Point p, Point q) {
    	//Heurística utilizada é a distância euclidiana
        return Math.sqrt(Math.pow(p.getX() - q.getX(), 2) + Math.pow(p.getY() - q.getY(), 2));
    }

}